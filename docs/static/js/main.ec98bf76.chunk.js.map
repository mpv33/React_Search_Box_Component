{"version":3,"sources":["Name.jsx","NamesContainer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Name","class","this","props","name","Component","NamesContainer","isShow","names","length","map","searchKey","App","state","searchTerm","openSearch","editSearchTerm","e","setState","target","value","dynamicSearch","filter","toLowerCase","includes","slice","OpenSaerch","CloseSearch","AddNewCompany","company","prompt","console","log","push","className","type","onFocus","onBlur","onChange","placeholder","onClick","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAYeA,G,6KARX,OACE,qBAAKC,MAAM,qBAAX,SACGC,KAAKC,MAAMC,W,GAJDC,cCsBJC,E,uKApBD,IAAD,OACL,OAAIJ,KAAKC,MAAMI,OACPL,KAAKC,MAAMK,MAAMC,OAAS,EAEtB,qBAAKR,MAAM,gBAAX,SACKC,KAAKC,MAAMK,MAAME,KAAI,SAAAN,GAAI,OAAI,cAAC,EAAD,CAAMO,UAAW,EAAKR,MAAMQ,UAAWP,KAAMA,SAK/E,mBAAGH,MAAM,YAAT,+CAMD,O,GAjBUI,aCyEdO,E,4MApEbC,MAAQ,CACNL,MAAO,CACL,QACA,SACA,SACA,eACA,gBACA,WACA,SACA,uBACA,MACA,QACA,wBACA,SACA,SACA,cACA,mBACA,aACA,SACA,6BACA,cAGFM,WAAY,GACZC,YAAY,G,EAGdC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEJ,WAAYG,EAAEE,OAAOC,S,EAGvCC,cAAgB,WACd,OAAO,EAAKR,MAAML,MAAMc,QAAO,SAAAlB,GAAI,OAAIA,EAAKmB,cAAcC,SAAS,EAAKX,MAAMC,WAAWS,kBAAgBE,MAAM,EAAG,K,EAGpHC,WAAa,WACX,EAAKR,SAAS,CAAEH,YAAY,K,EAG9BY,YAAc,WACZ,EAAKT,SAAS,CAAEH,YAAY,K,EAE9Ba,cAAgB,WACd,IAAIC,EAAUC,OAAO,8BACN,MAAXD,GAA8B,IAAXA,EACrBE,QAAQC,IAAI,cAEZ,EAAKnB,MAAML,MAAMyB,KAAKJ,I,uDAMxB,OACE,gCACE,oBAAI5B,MAAM,eAAV,iCACA,sBAAKA,MAAM,oBAAX,UACE,sBAAKA,MAAO,mBAAqBC,KAAKW,MAAME,WAAa,gBAAkB,IAA3E,UACE,uBAAOmB,UAAU,MAAMC,KAAK,OAAOC,QAASlC,KAAKwB,WAAYW,OAAQnC,KAAKyB,YAAaP,MAAOlB,KAAKW,MAAMC,WAAYwB,SAAUpC,KAAKc,eAAgBuB,YAAY,2BAChK,cAAC,EAAD,CAAgB5B,UAAWT,KAAKW,MAAMC,WAAYP,OAAQL,KAAKW,MAAME,WAAYP,MAAON,KAAKmB,qBAE/F,wBAAQpB,MAAM,kBAAkBuC,QAAStC,KAAK0B,cAA9C,6B,GA/DQa,IAAMpC,WCMTqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.ec98bf76.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Name extends Component {\n  render() {\n    return (\n      <div class=\"search-result-name\">\n        {this.props.name}\n      </div>\n    )\n  }\n}\n\nexport default Name","import React, { Component } from 'react'\nimport Name from './Name'\n\nclass NamesContainer extends Component {\n    render() {\n        if (this.props.isShow) {\n            if (this.props.names.length > 0) {\n                return (\n                    <div class=\"search-result\">\n                        {this.props.names.map(name => <Name searchKey={this.props.searchKey} name={name} />)}\n                    </div>\n                )\n            } else {\n                return (\n                    <p class=\"no-search\">\n                        Oops! Looks like no matches found\n                    </p>\n                )\n            }\n        } else {\n            return ''\n        }\n    }\n}\nexport default NamesContainer","import React from 'react';\n\nimport './App.css';\n\nimport NamesContainer from './NamesContainer';\n\nclass App extends React.Component {\n\n  state = {\n    names: [\n      'Adobe',\n      'Amazon',\n      'Amdocs',\n      'BMC Software',\n      'Cisco Systems',\n      'Dell EMC',\n      'Google',\n      'Hewlett-Packard (HP)',\n      'IBM',\n      'Intel',\n      'Microsoft Corporation',\n      'Oracle',\n      'Paypal',\n      'Pegasystems',\n      'Red Hat Software',\n      'Salesforce',\n      'SAP SE',\n      ' Symantec Software company',\n      'VMware Inc'\n\n    ],\n    searchTerm: '',\n    openSearch: false\n  }\n\n  editSearchTerm = (e) => {\n    this.setState({ searchTerm: e.target.value })\n  }\n\n  dynamicSearch = () => {\n    return this.state.names.filter(name => name.toLowerCase().includes(this.state.searchTerm.toLowerCase())).slice(0, 10)\n  }\n\n  OpenSaerch = () => {\n    this.setState({ openSearch: true })\n  }\n\n  CloseSearch = () => {\n    this.setState({ openSearch: false })\n  }\n  AddNewCompany = () => {\n    var company = prompt(\"Please enter company name:\");\n    if (company == null || company == \"\") {\n      console.log('wrong name')\n    } else {\n      this.state.names.push(company)\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1 class=\"search-title\">  Search Your MNC  </h1>\n        <div class=\"company-container\">\n          <div class={'SearchContainer' + (this.state.openSearch ? ' SearchActive' : '')}>\n            <input className=\"box\" type='text' onFocus={this.OpenSaerch} onBlur={this.CloseSearch} value={this.state.searchTerm} onChange={this.editSearchTerm} placeholder='Search name of Top MNC' />\n            <NamesContainer searchKey={this.state.searchTerm} isShow={this.state.openSearch} names={this.dynamicSearch()} />\n          </div>\n          <button class=\"add-new-company\" onClick={this.AddNewCompany}>ADD +</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//  <NamesContainer names = {this.dynamicSearch()}/>\nreportWebVitals();\n"],"sourceRoot":""}